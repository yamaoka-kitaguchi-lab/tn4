#!/usr/bin/env python3

"""

NBCK - NetBox Consistency Check

NBCK is a command-line utility to check and repair NetBox registration errors.
This makes sure NetBox for integrity and consistency just like the fsck command does for Linux filesystem.

$ PATH=$HOME/tn4-player/bin:$PATH
$ nbck --full-check --force-repair

Since: March 2022
See: https://github.com/yamaoka-kitaguchi-lab/tn4-player

"""

import click
from rich import box
from rich.console import Console, Group
from rich.panel import Panel
from rich.table import Table
from time import sleep


class NBCK:
    def __init__(self) -> None:
        self.console = Console(log_time_format = "%Y-%m-%dT%H:%M:%S")
        self.master_slave_tag_problems = None
        self.wifi_tag_problems = None

    def load_inventories(self, verbose=False) -> None:
        self.console.log("NBCK - NetBox Consistency Check")
        with self.console.status("[bold]Fetching the latest inventories from NetBox (netbox.m.noc.titech.ac.jp)..."):
            sleep(1)  # VLAN fetch
            self.console.log("Fetched all VLANs")
            sleep(1)  # IP Address fetch
            self.console.log("Fetched all IP Addresses")
            sleep(1)  # Device fetch
            self.console.log("Fetched all Devices")
            sleep(1)  # Interface fetch
            self.console.log("Fetched all Interfaces")


    def full_check(self, verbose=False) -> None:
        with self.console.status("[bold]Finding broken consistency..."):
            self.__check_master_slave_tag_consistency()
            self.console.log(f"Verified Master/Slave tag consistency ({len(self.master_slave_tag_problems)} problems found)")

            self.__check_wifi_tag_consistency()
            self.console.log(f"Verified Wi-Fi tag consistency ({len(self.wifi_tag_problems)} problems found)")

        tbl_idx_from = 0
        all_problems = [self.master_slave_tag_problems, self.wifi_tag_problems]
        for idx, problems in enumerate(all_problems):
            print()
            self.__print_problem_summary(problems, idx_from=tbl_idx_from, verbose=verbose, panel_title=f"Consistency Check Report ({idx+1})")
            #tbl_idx_from += len(problems)
            tbl_idx_from += 10


    def __print_problem_summary(self, problems, idx_from=0, verbose=False, use_panel=True, panel_title="") -> None:
        table = Table(show_header=True, header_style="bold red")
        table.box = box.SIMPLE
        #table.row_styles = ["none", "dim"]
        table.add_column("#", style="dim")
        table.add_column("Hostname", style="bold")
        table.add_column("IP address", style="dim")
        table.add_column("Interface", style="bold")
        table.add_column("Violation", style="cyan")
        if verbose:
            table.add_column("Current state", style="magenta")
            table.add_column("Desired state", style="green")

        for i in range(10):
            d = [str(idx_from+i), "s7-flets", "172.16.32.133", "GigabitEthernet0/1/20", "Master/Slave"]
            if verbose:
                d.extend([
                    "VLAN:  100, 120, 300, 310, 330\nPoE:   Enabled\nSpeed: Auto",
                    "VLAN:  100, 120, 300, 310, 330\nPoE:   Enabled\nSpeed: Auto",
                ])
            table.add_row(*d)

        if use_panel:
            self.console.print(Panel.fit(table, title=panel_title))
        else:
            self.console.print(table)


    def full_repair(self, skip_confirm=False, verbose=False) -> None:
        with self.console.status("[bold]Repairing broken master/slave tag consistency..."):
            self.__repair(self.master_slave_tag_problems)
            self.console.log("Repaired all Master/Slave tag inconsistencies")

        with self.console.status("[bold]Repairing broken Wi-Fi tag consistency..."):
            self.__repair(self.wifi_tag_problems)
            self.console.log("Repaired all Wi-Fi tag inconsistencies")


    def __repair(self, problems) -> None:
        sleep(1)  # dummy


    def __check_master_slave_tag_consistency(self) -> None:
        sleep(1)  # dummy
        self.master_slave_tag_problems = [{}]


    def __check_wifi_tag_consistency(self) -> None:
        sleep(1)  # dummy
        self.wifi_tag_problems = [{}]


@click.command(help="A command-line utility to check and repair NetBox integrity and consistency")
@click.option("--force-repair", "flg_force_repair", is_flag=True, default=False, help="Repair all inconsistencies without confirmation")
@click.option("--verbose", "flg_verbose", is_flag=True, default=False, help="Show defailed logging")
def main(flg_force_repair, flg_verbose):
    nbck = NBCK()
    #nbck.load_inventories(verbose=flg_verbose)
    nbck.full_check(verbose=flg_verbose)
    #nbck.full_repair(skip_confirm=flg_force_repair, verbose=flg_verbose)


if __name__ == "__main__":
    main()
