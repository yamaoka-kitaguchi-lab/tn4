#!/usr/bin/env python3

"""

tn4 - Titanet4 as Code

A command-line utility to repair NetBox and deploy Titanet4 with Ansible.

  * tn4 config - Rendering Jinja2 templates and exporting them as *.cfg files
  * tn4 deploy - Provisioning Titanet4 with Ansible fetching inventory from NetBox
  * tn4 shutdown - Shutting down Titanet4 in preparation for the campus-wide blackout
  * tn4 netbox - Scanning and repairing NetBox integrity and providing CLI-based operation

Since:   October 2022
Source:  https://github.com/yamaoka-kitaguchi-lab/tn4-player

"""

from argparse import ArgumentParser
import os
import sys

CURDIR       = os.path.dirname(__file__)
LIBRARY_PATH = os.path.join(CURDIR, "../lib")

sys.path.append(LIBRARY_PATH)

from tn4.__version__ import __version__ as __lib_version__
from tn4.cli.config import Config
from tn4.cli.deploy import Deploy
from tn4.cli.shutdown import Shutdown
from tn4.cli.netbox import NetBox


def csv_to_list(csv):
    if csv is None:
        return []
    return csv.split(",")


def jinja_path(string):
    if os.path.isfile(string):
        return string
    print(f"No such file: {string}")
    sys.exit(254)


def dir_path(string):
    if os.path.isdir(string):
        return string
    print(f"No such directory: {string}")
    sys.exit(254)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("-v", "--version", action="store_true", help="show version and exit")

    subparsers = parser.add_subparsers(title="commands", dest="command")

    parser1 = subparsers.add_parser("config",
                                    description="tn4 config - Rendering Jinja2 templates and exporting them as *.cfg files",
                                    help="Rendering Jinja2 templates and exporting them as *.cfg files",
                                    aliases=["c"])
    parser1.add_argument("--hosts",       type=str, help="limit the hosts")
    parser1.add_argument("--no-hosts",    type=str, help="exclude rule for --hosts")
    parser1.add_argument("--areas",       type=str, help="limit the hosts with specified regions or site groups (eg. ookayama-n,suzukake)")
    parser1.add_argument("--no-areas",    type=str, help="exclude rule for --areas")
    parser1.add_argument("--roles",       type=str, help="limit the hosts with specified device roles (eg. edge_sw)")
    parser1.add_argument("--no-roles",    type=str, help="exclude rule for --roles")
    parser1.add_argument("--vendors",     type=str, help="limit the hosts with specified manufacturers (eg. juniper)")
    parser1.add_argument("--no-vendors",  type=str, help="exclude rule for --vendors")
    parser1.add_argument("--tags",        type=str, help="limit the hosts with specified device tags (eg. test)")
    parser1.add_argument("--no-tags",     type=str, help="exclude rule for --tags")
    parser1.add_argument("--template",    type=jinja_path, help="custom jinja2 template path instead of the defautls")
    parser1.add_argument("-i", "--inventory", action="store_true", help="export the raw inventory json instead of rendered configs")
    parser1.add_argument("-x", "--use-cache", action="store_true", help="skip NetBox fetching and use local cache if available")
    parser1.add_argument("--debug",           action="store_true", help="debug mode")
    parser1.add_argument("DIR_PATH", type=dir_path, help="path of the output directory")

    parser2 = subparsers.add_parser("deploy",
                                    description="tn4 deploy - Provisioning Titanet4 with Ansible fetching inventory from NetBox",
                                    help="Provisioning Titanet4 with Ansible fetching inventory from NetBox",
                                    aliases=["d"])
    parser2.add_argument("--hosts",       type=str, help="limit the hosts")
    parser2.add_argument("--no-hosts",    type=str, help="exclude rule for --hosts")
    parser2.add_argument("--areas",       type=str, help="limit the hosts with specified regions or site groups (eg. ookayama-n,suzukake)")
    parser2.add_argument("--no-areas",    type=str, help="exclude rule for --areas")
    parser2.add_argument("--roles",       type=str, help="limit the hosts with specified device roles (eg. edge_sw)")
    parser2.add_argument("--no-roles",    type=str, help="exclude rule for --roles")
    parser2.add_argument("--vendors",     type=str, help="limit the hosts with specified manufacturers (eg. juniper)")
    parser2.add_argument("--no-vendors",  type=str, help="exclude rule for --vendors")
    parser2.add_argument("--tags",        type=str, help="limit the hosts with specified device tags (eg. test)")
    parser2.add_argument("--no-tags",     type=str, help="exclude rule for --tags")
    parser2.add_argument("--template",    type=jinja_path, help="custom jinja2 template path instead of the defautls")
    parser2.add_argument("-x", "--use-cache", action="store_true", help="skip NetBox fetching and use local cache if available")
    parser2.add_argument("--dryrun",          action="store_true", help="simulate a command without  provisioning it")
    parser2.add_argument("--debug",           action="store_true", help="debug mode")

    parser3 = subparsers.add_parser("shutdown",
                                    description="tn4 shutdown - Shutting down Titanet4 in preparation for the campus-wide blackout",
                                    help="Shutting down Titanet4 in preparation for the campus-wide blackout",
                                    aliases=["s"])
    parser3.add_argument("--reboot", action="store_true", help="request reboot instead of system halt")
    parser3.add_argument("-f", "--force",     action="store_true", help="ignore all warnings and skip confirmation")

    parser4 = subparsers.add_parser("netbox",
                                    description="tn4 netbox - Scanning and repairing NetBox integrity and providing CLI-based operation",
                                    help="Scanning and repairing NetBox integrity and providing CLI-based operation",
                                    aliases=["n"])
    parser4.add_argument("--check", action="store_true", help="")
    parser4.add_argument("--repair", action="store_true", help="")
    parser4.add_argument("-v", "--versbose", action="store_true", help="")
    parser4.add_argument("-f", "--force", action="store_true", help="ignore all warnings and skip confirmation")
    parser4.add_argument("--dryrun", action="store_true", help="simulate a command without  provisioning it")
    parser4.add_argument("--use-cache", action="store_true", help="use cache if available")

    args = parser.parse_args()

    match args.command:
        case "config" | "deploy" | "shutdown" | "c" | "d" | "s":
            args.hosts = csv_to_list(args.hosts)
            args.no_hosts = csv_to_list(args.no_hosts)
            args.areas = csv_to_list(args.areas)
            args.no_areas = csv_to_list(args.no_areas)
            args.roles = csv_to_list(args.roles)
            args.no_roles = csv_to_list(args.no_roles)
            args.vendors = csv_to_list(args.vendors)
            args.no_vendors = csv_to_list(args.no_vendors)
            args.tags = csv_to_list(args.tags)
            args.no_tags = csv_to_list(args.no_tags)

    code = None
    match args.command:
        case "config" | "c":
            code = Config(args).exec()
        case "deploy" | "d":
            code = Deploy(args).exec()
        case "shutdown" | "s":
            code = Shutdown(args).exec()
        case "netbox" | "n":
            code = NetBox(args).exec()
        case default:
            code = 1

    if args.version:
        print(f"library: {__lib_version__}")
        code = 0

    if code == 1:
        parser.print_help()

    sys.exit(code)

