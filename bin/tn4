#!/usr/bin/env python3

"""

tn4 - Titanet4 as Code

A command-line utility to repair NetBox and deploy Titanet4 with Ansible.

  * tn4 config - Rendering Jinja2 templates and exporting them as *.cfg files
  * tn4 deploy - Provisioning Titanet4 with Ansible fetching inventory from NetBox
  * tn4 shutdown - Shutting down Titanet4 in preparation for the campus-wide blackout
  * tn4 netbox - Scanning and repairing NetBox integrity and providing CLI-based operation

Since:   October 2022
Source:  https://github.com/yamaoka-kitaguchi-lab/tn4-player

"""

from argparse import ArgumentParser
import os
import sys

CURDIR       = os.path.dirname(__file__)
LIBRARY_PATH = os.path.join(CURDIR, "../lib")

sys.path.append(LIBRARY_PATH)



if __name__ == "__main__":
    parser = ArgumentParser()
    subparsers = parser.add_subparsers(title="commands")

    parser1 = subparsers.add_parser("config",
                                    description="tn4 config - Rendering Jinja2 templates and exporting them as *.cfg files",
                                    help="Rendering Jinja2 templates and exporting them as *.cfg files")
    parser1.add_argument("--hosts", type=str, help="limit the rendering targets to specified hosts (comma separated)")
    parser1.add_argument("--no-hosts", type=str, help="exclude specified hosts from rendering targets (comma separated)")
    parser1.add_argument("--area", type=str, help="limit the rendering targets to specified regions (comma separated)")
    parser1.add_argument("--no-area", type=str, help="exclude specified areas from rendering targets (comma separated)")
    parser1.add_argument("--roles", type=str, help="limit the rendering targets to specified roles (comma separated)")
    parser1.add_argument("--no-roles", type=str, help="exclude specified roles from rendering targets (comma separated)")
    parser1.add_argument("-f", "--force", action="store_true", help="ignore all warnings and skip confirmation")
    parser1.add_argument("--dryrun", action="store_true", help="simulate a command without actually rendering it")

    parser2 = subparsers.add_parser("deploy",
                                    description="tn4 deploy - Provisioning Titanet4 with Ansible fetching inventory from NetBox",
                                    help="Provisioning Titanet4 with Ansible fetching inventory from NetBox")
    parser2.add_argument("--hosts", type=str, help="limit the provisioning targets to specified hosts (comma separated)")
    parser2.add_argument("--no-hosts", type=str, help="exclude specified hosts from provisioning targets (comma separated)")
    parser2.add_argument("--area", type=str, help="limit the provisioning targets to specified regions (comma separated)")
    parser2.add_argument("--no-area", type=str, help="exclude specified areas from provisioning targets (comma separated)")
    parser2.add_argument("--roles", type=str, help="limit the provisioning targets to specified roles (comma separated)")
    parser2.add_argument("--no-roles", type=str, help="exclude specified roles from provisioning targets (comma separated)")
    parser2.add_argument("-f", "--force", action="store_true", help="ignore all warnings and skip confirmation")
    parser2.add_argument("--dryrun", action="store_true", help="simulate a command without actually provisioning it")

    parser3 = subparsers.add_parser("shutdown",
                                    description="tn4 shutdown - Shutting down Titanet4 in preparation for the campus-wide blackout",
                                    help="Shutting down Titanet4 in preparation for the campus-wide blackout")
    parser3.add_argument("--hosts", type=str, help="limit the shutdown targets to specified hosts (comma separated)")
    parser3.add_argument("--no-hosts", type=str, help="exclude specified hosts from shutdown targets (comma separated)")
    parser3.add_argument("--area", type=str, help="limit the shutdown targets to specified regions (comma separated)")
    parser3.add_argument("--no-area", type=str, help="exclude specified areas from shutdown targets (comma separated)")
    parser3.add_argument("--roles", type=str, help="limit the shutdown targets to specified roles (comma separated)")
    parser3.add_argument("--no-roles", type=str, help="exclude specified roles from shutdown targets (comma separated)")
    parser3.add_argument("--reboot", action="store_true", help="request reboot instead of system halt")
    parser3.add_argument("-f", "--force", action="store_true", help="ignore all warnings and skip confirmation")
    parser3.add_argument("--dryrun", action="store_true", help="simulate a command without actually shutdown it")

    parser4 = subparsers.add_parser("netbox",
                                    description="tn4 netbox - Scanning and repairing NetBox integrity and providing CLI-based operation",
                                    help="Scanning and repairing NetBox integrity and providing CLI-based operation")
    parser4.add_argument("--check", action="store_true", help="")
    parser4.add_argument("--repair", action="store_true", help="")
    parser4.add_argument("-v", "--versbose", action="store_true", help="")
    parser4.add_argument("-f", "--force", action="store_true", help="ignore all warnings and skip confirmation")
    parser4.add_argument("--dryrun", action="store_true", help="simulate a command without  provisioning it")

    args = parser.parse_args()

    print(args)

