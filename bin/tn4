#!/usr/bin/env python3

"""

tn4 - Titanet4 as Code

A command-line utility to deploy Titanet4 with Ansible and repair NetBox consistency.

  * tn4 config - Rendering Jinja2 templates and exporting them as *.cfg files
  * tn4 deploy - Provisioning Titanet4 with Ansible using NetBox as inventory
  * tn4 shutdown - Shutting down Titanet4 for the campus-wide blackout (not yet implemented)
  * tn4 doctor - Scanning and repairing NetBox inconsistencies, also providing CLI-based CRUD operations

Since:   October 2022
Source:  https://github.com/yamaoka-kitaguchi-lab/tn4-player

"""

from textwrap import dedent
import argparse
import os
import sys

CURDIR       = os.path.dirname(os.path.realpath(__file__))  # symbolic link
LIBRARY_PATH = os.path.join(CURDIR, "../lib")

sys.path.append(LIBRARY_PATH)

from tn4.__version__ import __version__ as __libtn4_version__
from tn4.cli.config import Config
from tn4.cli.deploy import Deploy
from tn4.cli.shutdown import Shutdown
from tn4.cli.doctor import Doctor
from tn4.cli.branch import BranchVlan


__version__ = "v2023.03.31"


def jinja_path(string):
    ## todo: validate jinja here
    if string[0] != "/":
        string = os.getcwd() + "/" + string
    if os.path.isfile(string):
        return string
    print(f"No such file: {string}")
    sys.exit(254)


def dir_path(string):
    if string[0] != "/":
        string = os.getcwd() + "/" + string
    if os.path.isdir(string):
        return string
    print(f"No such directory: {string}")
    sys.exit(254)


DEFAULT_CLI_ARGS = {
    "positional_args": (
        (
            ("private_dir",),
            dict(
                type=dir_path,
                help="base directory for data exporting",
            ),
        ),
    ),
    "generic_args": (
        (
            ("--version",),
            dict(
                action="store_true",
                help="show software version and exit",
            ),
        ),
        (
            ("--debug",),
            dict(
                action="store_true",
                help="enable tn4-cli debug mode. only for developers and should NOT be set if you don't know what to expect",
            ),
        ),
    ),
    "netbox_args": (
        (
            ("--netbox-url",),
            dict(
                type=str,
                help="custom NetBox URL (e.g. http://netbox00.m.noc.titech.ac.jp)",
            ),
        ),
        (
            ("--netbox-token",),
            dict(
                type=str,
                help="custom NetBox API token",
            ),
        ),
        (
            ("--use-cache",),
            dict(
                action="store_true",
                help="skip NetBox fetching and use local cache if available (~/.cache/tn4-player/*.cache)",
            ),
        ),
    ),
    "inventory_group_args": (
        (
            ("--hosts",),
            dict(
                type=str,
                help="comma-separated list of target hostnames",
            ),
        ),
        (
            ("--no-hosts",),
            dict(
                type=str,
                help="inverted option of ```--hosts```",
            ),
        ),
        (
            ("--areas",),
            dict(
                type=str,
                help="comma-separated list of target regions or site groups (e.g. ookayama-n,suzukake)",
            ),
        ),
        (
            ("--no-areas",),
            dict(
                type=str,
                help="inverted option of ```--areas```",
            ),
        ),
        (
            ("--roles",),
            dict(
                type=str,
                help="comma-separated list of target device roles (e.g. edge_sw)",
            ),
        ),
        (
            ("--no-roles",),
            dict(
                type=str,
                help="inverted option of ```--roles```",
            ),
        ),
        (
            ("--vendors",),
            dict(
                type=str,
                help="comma-separated list of target manufacturers (e.g. juniper)",
            ),
        ),
        (
            ("--no-vendors",),
            dict(
                type=str,
                help="inverted option of ```--vendors```",
            ),
        ),
        (
            ("--tags",),
            dict(
                type=str,
                help="comma-separated list of target tags (e.g. test)",
            ),
        ),
        (
            ("--no-tags",),
            dict(
                type=str,
                help="inverted option of ```--tags```",
            ),
        ),
        #(
        #    ("--use-cache",),
        #    dict(
        #        action="store_true",
        #        help="skip NetBox fetching and use local cache if available (~/.cache/tn4-player/*.cache)",
        #    ),
        #),
    )

}


class Tn4ArgumentParser(argparse.ArgumentParser):
    def error(self, message):
        super(Tn4ArgumentParser, self).error(message)


def print_common_usage():
    common_message = '''
        These are common tn4 examples:

            Render Jinaj2 templates and export them as *.cfg files

                tn4 config --use-cache /tmp/out
                tn4 config --areas ookayama-s,ishikawadai --no-hosts minami3 /tmp/out
                tn4 config --template /tmp/custom.j2 /tmp/out

            Fetch running configs and save them as *.cfg files

                tn4 config --remote-fetch /tmp/out

            Provisioning Titanet4 with Ansible

                tn4 deploy
                tn4 deploy -vv
                tn4 deploy --dryrun
                tn4 deploy --tags test --no-vendors cisco --commit-confirm 1
                tn4 deploy --tags test --no-vendors cisco --early-exit
                tn4 deploy --vendors juniper --no-roles core_sw --overwrite /tmp/junos.j2

            Scan NetBox and repair inconsistencies (ex-nbck command)

                tn4 doctor --use-cache --diagnose-only
                tn4 doctor --force-repair --tags test --areas ookayama

            Manage branch VLANs and VRRP group

                tn4 doctor branch-vlan --add
                tn4 doctor branch-vlan --delete

        `tn4 --help` list all optional command line arguments
    '''
    print(dedent(common_message)[1:])


def add_args_to_parser(parser, args):
    for arg in args:
        parser.add_argument(*arg[0], **arg[1])


def csv_to_list(csv):
    if csv is None:
        return []
    return csv.split(",")


if __name__ == "__main__":
    parser = Tn4ArgumentParser(
        prog="tn4",
        description="Run without arguments to see common usage",
    )

    subparsers = parser.add_subparsers(
        title="commands",
        description="COMMAND [ARGS]",
        dest="command",
    )

    add_args_to_parser(parser, DEFAULT_CLI_ARGS["generic_args"])

    config_parser = subparsers.add_parser(
       "config",
       description="tn4 config - Rendering Jinja2 templates and exporting them as *.cfg files",
       help="render Jinja2 templates or fetch running configs using Ansible",
       aliases=["c"],
    )

    add_args_to_parser(config_parser, DEFAULT_CLI_ARGS["netbox_args"])
    add_args_to_parser(config_parser, DEFAULT_CLI_ARGS["inventory_group_args"])

    config_parser.add_argument(
        "--remote-fetch",
        action="store_true",
        help="fetch and save running configs using Ansible and exit",
    )

    config_parser.add_argument(
        "--template",
        type=jinja_path,
        help="use custom Jinja2 template instead of the defautls",
        dest="custom_j2_path"
    )

    config_parser.add_argument(
        "--as-ansible-inventory",
        action="store_true",
        help="export the raw inventory json instead of rendered configs",
        dest="as_inventory",
    )

    add_args_to_parser(config_parser, DEFAULT_CLI_ARGS["positional_args"])

    deploy_parser = subparsers.add_parser(
        "deploy",
        description="tn4 deploy - Provisioning Titanet4 with Ansible using NetBox as inventory",
        help="provisioning Titanet4 with Ansible",
        aliases=["d"],
    )

    add_args_to_parser(deploy_parser, DEFAULT_CLI_ARGS["netbox_args"])
    add_args_to_parser(deploy_parser, DEFAULT_CLI_ARGS["inventory_group_args"])

    deploy_parser.add_argument(
        "--overwrite",
        type=jinja_path,
        help="use custom Jinja2 template instead of the defautls to overwrite configs",
        dest="overwrite_j2_path"
    )

    deploy_parser.add_argument(
        "--commit-confirm",
        type=int,
        help="set the time (minutes) to use in ```commit confirm```. only effective on juniper hosts",
        dest="commit_confirm_min",
    )

    deploy_parser.add_argument(
        "--dryrun",
        action="store_true",
        help="simulate a command's result without actually running it",
    )

    deploy_parser.add_argument(
        "--early-exit",
        action="store_true",
        help="just show the list of deploy targets and exit. most preferred",
    )

    deploy_parser.add_argument(
        "-v",
        action="count",
        help="increase the verbosity with multiple v's (up to 5)",
    )

    # shutdown_parser = subparsers.add_parser(
    #     "shutdown",
    #     description="tn4 shutdown - Shutting down Titanet4 in preparation for the campus-wide blackout",
    #     help="TBD: shutting down Titanet4 for the campus-wide blackout",
    #     #aliases=["s"],
    # )

    # add_args_to_parser(shutdown_parser, DEFAULT_CLI_ARGS["inventory_group_args"])

    # shutdown_parser.add_argument(
    #     "--reboot",
    #     action="store_true",
    #     help="request reboot instead of system halt",
    # )

    # shutdown_parser.add_argument(
    #     "--force",
    #     action="store_true",
    #     help="ignore all warnings and skip confirmation",
    # )

    doctor_parser = subparsers.add_parser(
        "doctor",
        description="tn4 doctor - Scanning NetBox and repairing inconsistencies, also providing CLI-based CRUD operations",
        help="scan and repair NetBox inconsistency",
        aliases=["x"],
    )

    add_args_to_parser(doctor_parser, DEFAULT_CLI_ARGS["netbox_args"])
    add_args_to_parser(doctor_parser, DEFAULT_CLI_ARGS["inventory_group_args"])

    doctor_parser.add_argument(
        "--diagnose-only",
        action="store_true",
        help="scan NetBox, present diagnosis report, and exit",
    )

    doctor_parser.add_argument(
        "--force-repair",
        action="store_true",
        help="skip confirmation and perform NetBox repair immediately if needed",
    )

    doctor_subparser = doctor_parser.add_subparsers(
        title="commands",
        description="COMMAND [ARGS]",
        dest="command",
    )

    branch_parser = doctor_subparser.add_parser(
        "branch-vlan",
        description="tn4 doctor branch-vlan - add or remove branch VLAN and setup VRRP",
        help="branch network management utilities",
    )

    branch_parser.add_argument(
        "--add",
        action="store_true",
        help="add branch VLAN and setup VRRP. must be with --prefix, --vrrp-master, --vrrp-backup, and --vrrp-vip",
    )

    branch_parser.add_argument(
        "--prefix",
        type=str,
        help="CIDR format of branch VLAN prefix (IPv4)",
        dest="cidr_prefix"
    )

    branch_parser.add_argument(
        "--prefix-v6",
        type=str,
        help="CIDR format of branch VLAN prefix (IPv6)",
        dest="cidr_prefix6"
    )

    branch_parser.add_argument(
        "--vrrp-master",
        type=str,
        help="VRRP master IP address without CIDR length. must be inside the VLAN prefix (IPv4)",
        dest="vrrp_master_ip"
    )

    branch_parser.add_argument(
        "--vrrp-master-v6",
        type=str,
        help="VRRP master IP address without CIDR length. must be inside the VLAN prefix (IPv6)",
        dest="vrrp_master_ip6"
    )

    branch_parser.add_argument(
        "--vrrp-backup",
        type=str,
        help="VRRP backup IP address without CIDR length. must be inside the VLAN prefix (IPv4)",
        dest="vrrp_backup_ip"
    )

    branch_parser.add_argument(
        "--vrrp-backup-v6",
        type=str,
        help="VRRP backup IP address without CIDR length. must be inside the VLAN prefix (IPv6)",
        dest="vrrp_backup_ip6"
    )

    branch_parser.add_argument(
        "--vrrp-vip",
        type=str,
        help="VRRP VIP address without CIDR length. must be inside the VLAN prefix (IPv4)",
        dest="vrrp_vip"
    )

    branch_parser.add_argument(
        "--vrrp-vip-v6",
        type=str,
        help="VRRP VIP address without CIDR length. must be inside the VLAN prefix (IPv6)",
        dest="vrrp_vip6"
    )

    branch_parser.add_argument(
        "--delete",
        action="store_true",
        help="delete branch VLAN and clear VRRP",
    )

    branch_parser.add_argument(
        "vlan_name",
        help="branch VLAN name",
    )

    args = parser.parse_args()

    match args.command:
        case "config" | "deploy" | "doctor" | "c" | "d" | "x":
            args.hosts = csv_to_list(args.hosts)
            args.no_hosts = csv_to_list(args.no_hosts)
            args.areas = csv_to_list(args.areas)
            args.no_areas = csv_to_list(args.no_areas)
            args.roles = csv_to_list(args.roles)
            args.no_roles = csv_to_list(args.no_roles)
            args.vendors = csv_to_list(args.vendors)
            args.no_vendors = csv_to_list(args.no_vendors)
            args.tags = csv_to_list(args.tags)
            args.no_tags = csv_to_list(args.no_tags)

    code = None

    if args.version:
        print(f"command: {__version__}")
        print(f"library: {__libtn4_version__}")
        sys.exit(0)

    try:
        match args.command:
            case "config" | "c":
                code = Config(args).exec()

            case "deploy" | "d":
                code = Deploy(args).exec()

            case "doctor" | "x":
                code = Doctor(args).exec()

            case "branch-vlan":
                is_for_ipv4_options  = args.cidr_prefix is None
                is_for_ipv4_options |= \
                    args.vrrp_vip is None == args.vrrp_master_ip is None == args.vrrp_backup_ip is None

                is_for_ipv6_options  = args.cidr_prefix6 is None
                is_for_ipv6_options |= \
                    args.vrrp_vip6 is None == args.vrrp_master_ip6 is None == args.vrrp_backup_ip6 is None

                is_insufficient_args = is_for_ipv4_options or is_for_ipv6_options

                if args.add and is_insufficient_args or args.add and args.delete:
                    branch_parser.print_help()
                    code = 1
                else:
                    code = BranchVlan(args).exec()

            case None:
                print_common_usage()
                code = 0

            case default:
                parser.print_help()
                code = 0

    except KeyboardInterrupt:
        sys.exit(254)

    sys.exit(code)

